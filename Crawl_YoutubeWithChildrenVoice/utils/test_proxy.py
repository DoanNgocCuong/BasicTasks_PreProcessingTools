#!/usr/bin/env python3\n\"\"\"\nProxy Test Script\n\nTests if the Selenium proxy layer is working by making requests through it.\n\"\"\"\n\nimport requests\nimport time\nimport os\n\ndef test_proxy_functionality():\n    \"\"\"Test if proxy is intercepting requests.\"\"\"\n    proxy_url = \"http://127.0.0.1:8080\"\n    \n    print(\"🧪 Testing Selenium Proxy Layer\")\n    print(\"=\" * 40)\n    \n    # Test 1: Direct request (no proxy)\n    print(\"\\n1. 📡 Testing DIRECT request (no proxy):\")\n    try:\n        response = requests.get(\"https://httpbin.org/ip\", timeout=10)\n        direct_ip = response.json().get('origin', 'Unknown')\n        print(f\"   Direct IP: {direct_ip}\")\n    except Exception as e:\n        print(f\"   ❌ Direct request failed: {e}\")\n        return\n    \n    # Test 2: Request through proxy\n    print(\"\\n2. 🔄 Testing request THROUGH PROXY:\")\n    proxies = {\n        'http': proxy_url,\n        'https': proxy_url\n    }\n    \n    try:\n        response = requests.get(\"https://httpbin.org/ip\", proxies=proxies, timeout=10)\n        proxy_ip = response.json().get('origin', 'Unknown')\n        print(f\"   Proxy IP: {proxy_ip}\")\n        \n        if proxy_ip != direct_ip:\n            print(f\"   ✅ SUCCESS: Proxy is working! IP changed from {direct_ip} to {proxy_ip}\")\n        else:\n            print(f\"   ⚠️  WARNING: Same IP, but proxy may still be working (check proxy logs)\")\n            \n    except Exception as e:\n        print(f\"   ❌ Proxy request failed: {e}\")\n        print(f\"   💡 Make sure proxy is running on {proxy_url}\")\n        return\n    \n    # Test 3: Multiple requests to see rotation\n    print(\"\\n3. 🔄 Testing IP rotation (5 requests):\")\n    ips_seen = set()\n    \n    for i in range(5):\n        try:\n            response = requests.get(\"https://httpbin.org/ip\", proxies=proxies, timeout=10)\n            ip = response.json().get('origin', 'Unknown')\n            ips_seen.add(ip)\n            print(f\"   Request {i+1}: {ip}\")\n            time.sleep(1)  # Small delay between requests\n        except Exception as e:\n            print(f\"   Request {i+1}: ❌ Failed - {e}\")\n    \n    print(f\"\\n📊 Results:\")\n    print(f\"   Unique IPs seen: {len(ips_seen)}\")\n    print(f\"   IPs: {list(ips_seen)}\")\n    \n    if len(ips_seen) > 1:\n        print(f\"   ✅ EXCELLENT: IP rotation is working!\")\n    else:\n        print(f\"   ⚠️  NOTE: Only one IP seen (may need more requests to trigger rotation)\")\n    \n    # Test 4: Admin endpoint\n    print(\"\\n4. 📊 Testing admin endpoint:\")\n    try:\n        admin_url = f\"{proxy_url}/_proxy_admin/test\"\n        response = requests.get(admin_url, timeout=5)\n        if response.status_code == 200:\n            data = response.json()\n            print(f\"   ✅ Admin endpoint working\")\n            print(f\"   Total requests processed: {data.get('total_requests_processed', 0)}\")\n        else:\n            print(f\"   ⚠️  Admin endpoint returned: {response.status_code}\")\n    except Exception as e:\n        print(f\"   ❌ Admin endpoint failed: {e}\")\n    \n    print(\"\\n🎯 Test completed!\")\n    print(\"\\n💡 To use proxy with your crawler:\")\n    print(f\"   $env:HTTP_PROXY='{proxy_url}'\")\n    print(f\"   $env:HTTPS_PROXY='{proxy_url}'\")\n    print(\"   python youtube_video_crawler.py\")\n\nif __name__ == \"__main__\":\n    test_proxy_functionality()\n